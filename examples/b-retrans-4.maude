
--- Module generated by B2Maude (2022-05-05)
--- Context: 
--- Machine: 

--- MAX-STEPS for the simulation: 10000

load ../m-theory/ebmachine .

mod ctxBRTP is
  inc EBMACHINE * (sort Configuration to Config) .

  --- Context: Sets and constants
  eq init-sets = 
   ('STATE |-> gen-set(("working" "success" "failure"))),
   ('DATA |-> gen-set(("D1" "D2")))
  .

  eq init-constants = 
   ('N |-> val(elt(100)))
  .

--- ===============================

--- VARIABLES 
 var $$fileR : EBType .
 var $$counterR : EBType .
 var $$counterS : EBType .
 var $$stateR : EBType .
 var $$stateS : EBType .
 var $$W : EBType .
 var $$D : EBType .

--- CONSTANTS 
 var $$N : EBType .

vars $$CNAME $$MNAME : Qid .
vars $$LEv $$LEv' : LEvent .
var  $$Sets : Map{Qid, EBSet} .
var  $$Cte  : Map{Qid, EBType} .
var  $$WEIGHT : Nat .
var  $$GUARD :  Bool . 

--- ===============================

  eq init-variables(  < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > )
   =
    ('fileR |-> val((empty).EBRel)),
   ('counterR |-> val(elt(0))),
   ('counterS |-> val(elt(0))),
   ('stateR |-> val(elt("working"))),
   ('stateS |-> val(elt("working"))),
   ('W |-> val(elt(true))),
   ('D |-> val(elt("D1"))) .


----------------------------
--- Event SND-snd-data
----------------------------

--- Activation of the Event SND-snd-data
ceq [SND-snd-data] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    < events  : Events  | state: ($$LEv ev('SND-snd-data, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('SND-snd-data, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('SND-snd-data, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((($$W) =b (val(elt(true)))) andb (($$stateS) =b (val(elt("working"))))) 
.

--- Change of state for event SND-snd-data
rl [SND-snd-data] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    < events  : Events  | state: ( ev('SND-snd-data, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
    < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'D |-> val(elt("D2")) , 'W |-> val(elt(false))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event RCV-current-data
----------------------------

--- Activation of the Event RCV-current-data
ceq [RCV-current-data] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    < events  : Events  | state: ($$LEv ev('RCV-current-data, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('RCV-current-data, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('RCV-current-data, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((((($$stateR) =b (val(elt("working")))) andb (($$W) =b (val(elt(false))))) andb (($$counterR) =b ($$counterS))) andb (( ( ($$counterR) + (val(elt(1))) )) < ($$N))) 
.

--- Change of state for event RCV-current-data
rl [RCV-current-data] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    < events  : Events  | state: ( ev('RCV-current-data, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
    < $$MNAME : Machine | variables: ('counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D , 'counterR |-> ($$counterR) + (val(elt(1))) , 'fileR |-> overr($$fileR, val( ( $$counterR |-> $$D ) ))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event RCV-success
----------------------------

--- Activation of the Event RCV-success
ceq [RCV-success] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    < events  : Events  | state: ($$LEv ev('RCV-success, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('RCV-success, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('RCV-success, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((((($$stateR) =b (val(elt("working")))) andb (($$W) =b (val(elt(false))))) andb (($$N) =b ( ( ($$counterR) + (val(elt(1))) )))) andb (($$counterR) =b ($$counterS))) 
.

--- Change of state for event RCV-success
rl [RCV-success] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    < events  : Events  | state: ( ev('RCV-success, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
    < $$MNAME : Machine | variables: ('counterS |-> $$counterS , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D , 'stateR |-> val(elt("success")) , 'fileR |-> overr($$fileR, val( ( $$counterR |-> $$D ) )) , 'counterR |-> ($$counterR) + (val(elt(1)))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event SND-rcv-current-ack
----------------------------

--- Activation of the Event SND-rcv-current-ack
ceq [SND-rcv-current-ack] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    < events  : Events  | state: ($$LEv ev('SND-rcv-current-ack, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('SND-rcv-current-ack, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('SND-rcv-current-ack, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((((($$stateS) =b (val(elt("working")))) andb (($$W) =b (val(elt(false))))) andb (( ( ($$counterS) + (val(elt(1))) )) < ($$N))) andb (($$counterR) =b ( ( ($$counterS) + (val(elt(1))) )))) 
.

--- Change of state for event SND-rcv-current-ack
rl [SND-rcv-current-ack] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    < events  : Events  | state: ( ev('SND-rcv-current-ack, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
    < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'D |-> $$D , 'W |-> val(elt(true)) , 'counterS |-> ($$counterS) + (val(elt(1)))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event SND-success
----------------------------

--- Activation of the Event SND-success
ceq [SND-success] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    < events  : Events  | state: ($$LEv ev('SND-success, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('SND-success, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('SND-success, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((((($$stateS) =b (val(elt("working")))) andb (($$W) =b (val(elt(false))))) andb (( ( ($$counterS) + (val(elt(1))) )) =b ($$N))) andb (($$counterR) =b ( ( ($$counterS) + (val(elt(1))) )))) 
.

--- Change of state for event SND-success
rl [SND-success] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    < events  : Events  | state: ( ev('SND-success, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
    < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'W |-> $$W , 'D |-> $$D , 'stateS |-> val(elt("success"))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event SND-time-out
----------------------------

--- Activation of the Event SND-time-out
ceq [SND-time-out] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    < events  : Events  | state: ($$LEv ev('SND-time-out, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('SND-time-out, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('SND-time-out, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((($$stateS) =b (val(elt("working")))) andb (($$W) =b (val(elt(false))))) 
.

--- Change of state for event SND-time-out
rl [SND-time-out] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > 
    < events  : Events  | state: ( ev('SND-time-out, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N) > 
    < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'D |-> $$D , 'W |-> val(elt(true))) > 
    < events : Events | state: init-events >
    .


  --- Initialization of events
  eq init-events = ev('SND-snd-data, unknown) ev('RCV-current-data, unknown) ev('RCV-success, unknown) ev('SND-rcv-current-ack, unknown) ev('SND-success, unknown) ev('SND-time-out, unknown) .

  --- Rule for choosing the next event to be executed
  --- It stops when the system is in a deadlock or the limit 
  --- MAX-STEPS is reached. 
  var nsteps : Nat .
  crl [next-event] :
     < events : Events | state: ($$LEv) > 
     steps(nsteps)
     =>
     < events : Events | state: choose-event($$LEv') >
     steps(nsteps + 1)
  if
        nsteps <= MAX-STEPS
    /\  not-unknown($$LEv) --- all the guards have been checked
    /\  one-firable($$LEv) --- one of the events is firable
    /\  $$LEv' := accumulate(enabled-events($$LEv)) --- extract the enabled events and accumulate
  .

  --- --------------------------
  --- PVesTa -------------------
  --- --------------------------
  var Conf : Config .
  op tick : Config -> Config .
  eq tick( Conf )  = Conf .
  op MAX-STEPS : -> Nat .
  eq MAX-STEPS = 10000 .
  op steps : Nat -> Config .

  --- Observable properties
  op val : Nat Config -> Float .

  --- Simulation steps
  eq val(0, Conf steps(N:Nat) ) = float(N:Nat) .

  --- This definition depends on the system
  --- Change 1.0 with, for instance,   float(ebset2nat($$n)) 
  --- eq val(1, Conf < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > ) = 1.0 . 
  --- Properties can be also defined in the .b file with a section PROPERTIES


eq val(1, Conf < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > ) 
  = toFloat(((($$stateS) =b (val(elt("success")))) andb (($$stateR) =b (val(elt("success")))))) .

eq val(2, Conf < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D) > ) 
  = toFloat(((($$stateS) =b (val(elt("failure")))) andb (($$stateR) =b (val(elt("failure")))))) .


  ---- Defining the initial state
  op initState : Nat -> Config .
  op initState : -> Config .
  rl initState => initState(counter) .

  eq initState(N:Nat) = init-machine('ctxBRTP, 'BRTP) steps(0)  .
endm

eof

--- example of use
rew [1] initState .

