
--- Module generated by B2Maude (2024-12-20)
--- Context: 
--- Machine: 

load ../../b2m-theory/ebmachine .

mod ctxPNL is
  inc EBMACHINE .

  --- Context: Sets and constants
  eq init-sets = 
   ('AGENTS |-> gen-set(("a" "b" "c" "d")))
  .

  eq init-constants = 
  empty 
  .

--- ===============================

--- VARIABLES 
 var $$AgentsComb : EBType .
 var $$Rpositive : EBType .
 var $$Rnegative : EBType .

--- CONSTANTS 

vars $$CNAME $$MNAME : Qid .
vars $$SEv $$SEv' : SEvent .
var  $$Sets : Map{Qid, EBSet} .
var  $$Cte  : Map{Qid, EBType} .
var  $$WEIGHT : Nat .
var  $$GUARD :  Bool . 

--- ===============================

  eq init-variables(  < $$CNAME : Context | sets : ($$Sets), constants : (empty) > )
   =
    ('AgentsComb |-> val( ( elt("a") |-> elt("b") , elt("a") |-> elt("c") , elt("a") |-> elt("d") , elt("b") |-> elt("c") , elt("b") |-> elt("d") , elt("c") |-> elt("d") ) )),
   ('Rpositive |-> val( ( elt("a") |-> elt("b") , elt("a") |-> elt("c") , elt("b") |-> elt("c") ) )),
   ('Rnegative |-> val((empty).EBRel)) .


----------------------------
--- Event addPositiveEdge
----------------------------

--- Activation of the Event addPositiveEdge
ceq [addPositiveEdge] :
    < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
  < $$MNAME : Machine | variables : ('AgentsComb |-> $$AgentsComb , 'Rpositive |-> $$Rpositive , 'Rnegative |-> $$Rnegative), events : ( ( $$SEv, ev('addPositiveEdge, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
  < $$MNAME : Machine | variables : ('AgentsComb |-> $$AgentsComb , 'Rpositive |-> $$Rpositive , 'Rnegative |-> $$Rnegative), events : (($$SEv, ev('addPositiveEdge, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
  < $$MNAME : Machine | variables : ('AgentsComb |-> $$AgentsComb , 'Rpositive |-> $$Rpositive , 'Rnegative |-> $$Rnegative), events : (($$SEv, ev('addPositiveEdge, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(val(elt(true)))  and  is-empty( (( ( ($$AgentsComb) / ($$Rpositive) )) / ($$Rnegative)) ) == false 
.

--- Change of state for event addPositiveEdge
rl [addPositiveEdge] : 
    < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
  < $$MNAME : Machine | variables : ('AgentsComb |-> $$AgentsComb , 'Rpositive |-> $$Rpositive , 'Rnegative |-> $$Rnegative), events : ev('addPositiveEdge, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
    < $$MNAME : Machine | variables : ('AgentsComb |-> $$AgentsComb , 'Rnegative |-> $$Rnegative , 'Rpositive |-> union($$Rpositive, choice(( ( ($$AgentsComb) / ($$Rpositive) )) / ($$Rnegative)))) , events : ev('addPositiveEdge, running) > 
    . 
----------------------------
--- Event addNegativeEdge
----------------------------

--- Activation of the Event addNegativeEdge
ceq [addNegativeEdge] :
    < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
  < $$MNAME : Machine | variables : ('AgentsComb |-> $$AgentsComb , 'Rpositive |-> $$Rpositive , 'Rnegative |-> $$Rnegative), events : ( ( $$SEv, ev('addNegativeEdge, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
  < $$MNAME : Machine | variables : ('AgentsComb |-> $$AgentsComb , 'Rpositive |-> $$Rpositive , 'Rnegative |-> $$Rnegative), events : (($$SEv, ev('addNegativeEdge, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
  < $$MNAME : Machine | variables : ('AgentsComb |-> $$AgentsComb , 'Rpositive |-> $$Rpositive , 'Rnegative |-> $$Rnegative), events : (($$SEv, ev('addNegativeEdge, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(val(elt(true)))  and  is-empty( (( ( ($$AgentsComb) / ($$Rpositive) )) / ($$Rnegative)) ) == false 
.

--- Change of state for event addNegativeEdge
rl [addNegativeEdge] : 
    < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
  < $$MNAME : Machine | variables : ('AgentsComb |-> $$AgentsComb , 'Rpositive |-> $$Rpositive , 'Rnegative |-> $$Rnegative), events : ev('addNegativeEdge, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
    < $$MNAME : Machine | variables : ('AgentsComb |-> $$AgentsComb , 'Rpositive |-> $$Rpositive , 'Rnegative |-> union($$Rnegative, choice(( ( ($$AgentsComb) / ($$Rpositive) )) / ($$Rnegative)))) , events : ev('addNegativeEdge, running) > 
    . 
  --- Initialization of events
  eq init-events = ev('addPositiveEdge, unknown),ev('addNegativeEdge, unknown) .


  --- ------------
  --- Properties  
  --- ------------
  var SYS : Configuration .


  --- This definition depends on the system
  --- Change 1.0 with, for instance,   float(ebset2nat($$n)) 
  --- eq val(1, Conf < $$MNAME : Machine | variables: ('AgentsComb |-> $$AgentsComb , 'Rpositive |-> $$Rpositive , 'Rnegative |-> $$Rnegative), events : $$SEv > ) = 1.0 . 
  --- Properties can be also defined in the .b file with a section PROPERTIES



  ---- Defining the initial state
  op initState : -> Configuration .
  eq initState = init-machine('ctxPNL, 'PNL) .
endm

eof

--- example of use

--- One step of rewriting
rew [1] initState . 

--- Search for all reachable states satisfying prop(1)
search initState =>* SYS such that SYS |= prop(1) .

--- Model Checking 
red modelCheck(initState, True) .

--- Umaudemc for stochastic model checking
umaudemc scheck file.maude initState formula.quatex

