
--- Module generated by B2Maude (2022-05-06)
--- Context: 
--- Machine: 

--- MAX-STEPS for the simulation: 10000

load ../m-theory/ebmachine .

mod ctxP2P is
  inc EBMACHINE * (sort Configuration to Config) .

  --- Context: Sets and constants
  eq init-sets = 
   ('STATE |-> gen-set(("emp" "ok" "sending")))
  .

  eq init-constants = 
   ('N |-> val(elt(5))),
   ('K |-> val(elt(10)))
  .

--- ===============================

--- VARIABLES 
 var $$file : EBType .
 var $$n : EBType .
 var $$done : EBType .

--- CONSTANTS 
 var $$N : EBType .
 var $$K : EBType .

vars $$CNAME $$MNAME : Qid .
vars $$LEv $$LEv' : LEvent .
var  $$Sets : Map{Qid, EBSet} .
var  $$Cte  : Map{Qid, EBType} .
var  $$WEIGHT : Nat .
var  $$GUARD :  Bool . 

--- ===============================

  eq init-variables(  < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > )
   =
    ('file |-> make-rel(val(ebset2nat(val(elt(0))) ..  ebset2nat( ( (($$N) * ($$K)) - (val(elt(1))) ))), val( ( elt("emp") ) ))),
   ('n |-> val(elt(0))),
   ('done |-> val(elt(false))) .


----------------------------
--- Event sent
----------------------------

--- Activation of the Event sent
ceq [sent] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > 
    < events  : Events  | state: ($$LEv ev('sent, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('sent, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('sent, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat((($$N) * ($$K)) - (card(ran-res($$file, val( ( elt("sending") ) ))))) 
     /\ $$GUARD  := ebset2bool(val(elt(true)))  and  is-empty( ( $$filter1((dom(ran-res($$file, val( ( elt("emp") ) )))), (< $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > ))) ) == false 
.

--- Change of state for event sent
rl [sent] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > 
    < events  : Events  | state: ( ev('sent, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
    < $$MNAME : Machine | variables: ('done |-> $$done , 'file |-> overr($$file, val( ( choice( $$filter1((dom(ran-res($$file, val( ( elt("emp") ) )))), (< $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > ))) |-> elt("sending") ) )) , 'n |-> ($$n) + (val(elt(1)))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event receive
----------------------------

--- Activation of the Event receive
ceq [receive] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > 
    < events  : Events  | state: ($$LEv ev('receive, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('receive, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('receive, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat((val(elt(1))) + (card(ran-res($$file, val( ( elt("ok") ) ))))) 
     /\ $$GUARD  := ebset2bool(val(elt(true)))  and  is-empty( (dom(ran-res($$file, val( ( elt("sending") ) )))) ) == false 
.

--- Change of state for event receive
rl [receive] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > 
    < events  : Events  | state: ( ev('receive, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
    < $$MNAME : Machine | variables: ('n |-> $$n , 'done |-> $$done , 'file |-> overr($$file, val( ( choice(dom(ran-res($$file, val( ( elt("sending") ) )))) |-> elt("ok") ) ))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event fail
----------------------------

--- Activation of the Event fail
ceq [fail] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > 
    < events  : Events  | state: ($$LEv ev('fail, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('fail, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('fail, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat((($$N) * ($$K)) - (card(ran-res($$file, val( ( elt("ok") ) ))))) 
     /\ $$GUARD  := ebset2bool(val(elt(true)))  and  is-empty( (dom(ran-res($$file, val( ( elt("sending") ) )))) ) == false 
.

--- Change of state for event fail
rl [fail] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > 
    < events  : Events  | state: ( ev('fail, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
    < $$MNAME : Machine | variables: ('n |-> $$n , 'done |-> $$done , 'file |-> choice( $$file @ 0.6   ( overr($$file, val( ( choice(dom(ran-res($$file, val( ( elt("sending") ) )))) |-> elt("emp") ) )) ) @ 0.4)) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event finish
----------------------------

--- Activation of the Event finish
ceq [finish] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > 
    < events  : Events  | state: ($$LEv ev('finish, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('finish, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('finish, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(( ( ($$done) =b (val(elt(false))) )) andb ( ( (card(ran-res($$file, val( ( elt("ok") ) )))) =b (($$N) * ($$K)) ))) 
.

--- Change of state for event finish
rl [finish] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > 
    < events  : Events  | state: ( ev('finish, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
    < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> val(elt(true))) > 
    < events : Events | state: init-events >
    .

--- Auxiliary map-like functions

var $$lbd2  : EBType .
var $$lbdn2 : Nat . 
var $$lbdS2 : EBSet . 
op $$map2   : EBType Config -> EBType .
eq $$map2(val( (empty).EBSet), C:Config) = val( (empty).EBSet) .
eq $$map2(val( (elt($$lbdn2), $$lbdS2)), (< $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > )) =
 union(((val(elt($$lbdn2))) rem ($$N)), $$map2(val($$lbdS2),< $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > )) . 

var $$lbd1  : EBType . 
var $$lbdn1 : Nat . 
var $$lbdS1 : EBSet . 
op $$filter1   : EBType Config -> EBType .
eq $$filter1(val( (empty).EBSet), C:Config) = val( (empty).EBSet) .
eq $$filter1(val( (elt($$lbdn1), $$lbdS1)), (< $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > )) =
   if ebset2bool( ( ( ( (val(elt($$lbdn1))) rem ($$N) )) nin ( $$map2((dom(ran-res($$file, val( ( elt("sending") ) )))), (< $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > ))) )) 
   then union(val(elt($$lbdn1)), $$filter1(val($$lbdS1),< $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > ))
   else $$filter1(val($$lbdS1),< $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > )
   fi .

--- ---------------------------

  --- Initialization of events
  eq init-events = ev('sent, unknown) ev('receive, unknown) ev('fail, unknown) ev('finish, unknown) .

  --- Rule for choosing the next event to be executed
  --- It stops when the system is in a deadlock or the limit 
  --- MAX-STEPS is reached. 
  var nsteps : Nat .
  crl [next-event] :
     < events : Events | state: ($$LEv) > 
     steps(nsteps)
     =>
     < events : Events | state: choose-event($$LEv') >
     steps(nsteps + 1)
  if
        nsteps <= MAX-STEPS
    /\  not-unknown($$LEv) --- all the guards have been checked
    /\  one-firable($$LEv) --- one of the events is firable
    /\  $$LEv' := accumulate(enabled-events($$LEv)) --- extract the enabled events and accumulate
  .

  --- --------------------------
  --- PVesTa -------------------
  --- --------------------------
  var Conf : Config .
  op tick : Config -> Config .
  eq tick( Conf )  = Conf .
  op MAX-STEPS : -> Nat .
  eq MAX-STEPS = 10000 .
  op steps : Nat -> Config .

  --- Observable properties
  op val : Nat Config -> Float .

  --- Simulation steps
  eq val(0, Conf steps(N:Nat) ) = float(N:Nat) .

  --- This definition depends on the system
  --- Change 1.0 with, for instance,   float(ebset2nat($$n)) 
  --- eq val(1, Conf < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > ) = 1.0 . 
  --- Properties can be also defined in the .b file with a section PROPERTIES


eq val(1, Conf < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done) > ) 
  = toFloat(($$n)) .


  ---- Defining the initial state
  op initState : Nat -> Config .
  op initState : -> Config .
  rl initState => initState(counter) .

  eq initState(N:Nat) = init-machine('ctxP2P, 'P2P) steps(0)  .
endm

eof

--- example of use
rew [1] initState .

