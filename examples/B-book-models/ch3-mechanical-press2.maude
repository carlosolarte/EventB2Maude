
--- Module generated by B2Maude (2023-07-12)
--- Context: 
--- Machine: 

--- MAX-STEPS for the simulation: 10000

load ../m-theory/ebmachine .

mod ctxMechanicalPress is
  inc EBMACHINE * (sort Configuration to Config) .

  --- Context: Sets and constants
  eq init-sets = 
   ('STATUS |-> gen-set(("stopped" "working")))
  .

  eq init-constants = 
  empty 
  .

--- ===============================

--- VARIABLES 
 var $$motoract : EBType .
 var $$motorsen : EBType .
 var $$startmotorB : EBType .
 var $$stopmotorB : EBType .
 var $$startmotorI : EBType .
 var $$stopmotorI : EBType .

--- CONSTANTS 

vars $$CNAME $$MNAME : Qid .
vars $$LEv $$LEv' : LEvent .
var  $$Sets : Map{Qid, EBSet} .
var  $$Cte  : Map{Qid, EBType} .
var  $$WEIGHT : Nat .
var  $$GUARD :  Bool . 

--- ===============================

  eq init-variables(  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > )
   =
    ('motoract |-> val(elt("stopped"))),
   ('motorsen |-> val(elt("stopped"))),
   ('startmotorB |-> val(elt(false))),
   ('stopmotorB |-> val(elt(false))),
   ('startmotorI |-> val(elt(false))),
   ('stopmotorI |-> val(elt(false))) .


----------------------------
--- Event PushStartMotorB
----------------------------

--- Activation of the Event PushStartMotorB
ceq [PushStartMotorB] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ($$LEv ev('PushStartMotorB, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('PushStartMotorB, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('PushStartMotorB, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$startmotorB) =b (val(elt(false)))) 
.

--- Change of state for event PushStartMotorB
rl [PushStartMotorB] : 
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ( ev('PushStartMotorB, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI , 'startmotorB |-> val(elt(true))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event ReleaseStartMotorB
----------------------------

--- Activation of the Event ReleaseStartMotorB
ceq [ReleaseStartMotorB] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ($$LEv ev('ReleaseStartMotorB, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('ReleaseStartMotorB, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('ReleaseStartMotorB, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$startmotorB) =b (val(elt(true)))) 
.

--- Change of state for event ReleaseStartMotorB
rl [ReleaseStartMotorB] : 
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ( ev('ReleaseStartMotorB, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI , 'startmotorB |-> val(elt(false))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event StartMotor
----------------------------

--- Activation of the Event StartMotor
ceq [StartMotor] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ($$LEv ev('StartMotor, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('StartMotor, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('StartMotor, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((((($$motoract) =b (val(elt("stopped")))) andb (($$motorsen) =b (val(elt("stopped"))))) andb (($$startmotorI) =b (val(elt(false))))) andb (($$startmotorB) =b (val(elt(true))))) 
.

--- Change of state for event StartMotor
rl [StartMotor] : 
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ( ev('StartMotor, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'stopmotorI |-> $$stopmotorI , 'startmotorI |-> val(elt(true)) , 'motoract |-> val(elt("working"))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event TReleaseStartMotorB
----------------------------

--- Activation of the Event TReleaseStartMotorB
ceq [TReleaseStartMotorB] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ($$LEv ev('TReleaseStartMotorB, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('TReleaseStartMotorB, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('TReleaseStartMotorB, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((($$startmotorI) =b (val(elt(true)))) andb (($$startmotorB) =b (val(elt(false))))) 
.

--- Change of state for event TReleaseStartMotorB
rl [TReleaseStartMotorB] : 
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ( ev('TReleaseStartMotorB, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'stopmotorI |-> $$stopmotorI , 'startmotorI |-> val(elt(false))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event PushStopMotorB
----------------------------

--- Activation of the Event PushStopMotorB
ceq [PushStopMotorB] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ($$LEv ev('PushStopMotorB, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('PushStopMotorB, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('PushStopMotorB, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$stopmotorB) =b (val(elt(false)))) 
.

--- Change of state for event PushStopMotorB
rl [PushStopMotorB] : 
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ( ev('PushStopMotorB, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI , 'stopmotorB |-> val(elt(true))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event ReleaseStopMotorB
----------------------------

--- Activation of the Event ReleaseStopMotorB
ceq [ReleaseStopMotorB] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ($$LEv ev('ReleaseStopMotorB, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('ReleaseStopMotorB, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('ReleaseStopMotorB, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$stopmotorB) =b (val(elt(true)))) 
.

--- Change of state for event ReleaseStopMotorB
rl [ReleaseStopMotorB] : 
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ( ev('ReleaseStopMotorB, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI , 'stopmotorB |-> val(elt(false))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event StopMotor
----------------------------

--- Activation of the Event StopMotor
ceq [StopMotor] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ($$LEv ev('StopMotor, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('StopMotor, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('StopMotor, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((((($$stopmotorI) =b (val(elt(false)))) andb (($$stopmotorB) =b (val(elt(true))))) andb (($$motoract) =b (val(elt("working"))))) andb (($$motorsen) =b (val(elt("working"))))) 
.

--- Change of state for event StopMotor
rl [StopMotor] : 
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ( ev('StopMotor, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'motoract |-> val(elt("stopped")) , 'stopmotorI |-> val(elt(true))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event TreatReleaseStopMotorB
----------------------------

--- Activation of the Event TreatReleaseStopMotorB
ceq [TreatReleaseStopMotorB] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ($$LEv ev('TreatReleaseStopMotorB, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('TreatReleaseStopMotorB, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('TreatReleaseStopMotorB, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((($$stopmotorI) =b (val(elt(true)))) andb (($$stopmotorB) =b (val(elt(false))))) 
.

--- Change of state for event TreatReleaseStopMotorB
rl [TreatReleaseStopMotorB] : 
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ( ev('TreatReleaseStopMotorB, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> val(elt(false))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event MotorStart
----------------------------

--- Activation of the Event MotorStart
ceq [MotorStart] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ($$LEv ev('MotorStart, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('MotorStart, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('MotorStart, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((($$motorsen) =b (val(elt("stopped")))) andb (($$motoract) =b (val(elt("working"))))) 
.

--- Change of state for event MotorStart
rl [MotorStart] : 
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ( ev('MotorStart, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI , 'motorsen |-> val(elt("working"))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event MotorStop
----------------------------

--- Activation of the Event MotorStop
ceq [MotorStop] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ($$LEv ev('MotorStop, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('MotorStop, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('MotorStop, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((($$motorsen) =b (val(elt("working")))) andb (($$motoract) =b (val(elt("stopped"))))) 
.

--- Change of state for event MotorStop
rl [MotorStop] : 
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ( ev('MotorStop, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI , 'motorsen |-> val(elt("stopped"))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event PushButtonMotorFalse
----------------------------

--- Activation of the Event PushButtonMotorFalse
ceq [PushButtonMotorFalse] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ($$LEv ev('PushButtonMotorFalse, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('PushButtonMotorFalse, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('PushButtonMotorFalse, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(((($$startmotorI) =b (val(elt(false)))) andb (($$startmotorB) =b (val(elt(true))))) andb ( ( (($$motoract) =b (val(elt("working")))) orb (($$motorsen) =b (val(elt("working")))) ))) 
.

--- Change of state for event PushButtonMotorFalse
rl [PushButtonMotorFalse] : 
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > 
    < events  : Events  | state: ( ev('PushButtonMotorFalse, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'stopmotorI |-> $$stopmotorI , 'startmotorI |-> val(elt(true))) > 
    < events : Events | state: init-events >
    .


  --- Initialization of events
  eq init-events = ev('PushStartMotorB, unknown) ev('ReleaseStartMotorB, unknown) ev('StartMotor, unknown) ev('TReleaseStartMotorB, unknown) ev('PushStopMotorB, unknown) ev('ReleaseStopMotorB, unknown) ev('StopMotor, unknown) ev('TreatReleaseStopMotorB, unknown) ev('MotorStart, unknown) ev('MotorStop, unknown) ev('PushButtonMotorFalse, unknown) .

  --- Rule for choosing the next event to be executed
  --- It stops when the system is in a deadlock or the limit 
  --- MAX-STEPS is reached. 
  var nsteps : Nat .
  crl [next-event] :
     < events : Events | state: ($$LEv) > 
     steps(nsteps)
     =>
     < events : Events | state: choose-event($$LEv') >
     steps(nsteps + 1)
  if
        nsteps <= MAX-STEPS
    /\  not-unknown($$LEv) --- all the guards have been checked
    /\  one-firable($$LEv) --- one of the events is firable
    /\  $$LEv' := accumulate(enabled-events($$LEv)) --- extract the enabled events and accumulate
  .

  --- --------------------------
  --- PVesTa -------------------
  --- --------------------------
  var Conf : Config .
  op tick : Config -> Config .
  eq tick( Conf )  = Conf .
  op MAX-STEPS : -> Nat .
  eq MAX-STEPS = 10000 .
  op steps : Nat -> Config .

  --- Observable properties
  op val : Nat Config -> Float .

  --- Simulation steps
  eq val(0, Conf steps(N:Nat) ) = float(N:Nat) .

  --- This definition depends on the system
  --- Change 1.0 with, for instance,   float(ebset2nat($$n)) 
  --- eq val(1, Conf < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > ) = 1.0 . 
  --- Properties can be also defined in the .b file with a section PROPERTIES


eq val(1, Conf < $$MNAME : Machine | variables: ('motoract |-> $$motoract , 'motorsen |-> $$motorsen , 'startmotorB |-> $$startmotorB , 'stopmotorB |-> $$stopmotorB , 'startmotorI |-> $$startmotorI , 'stopmotorI |-> $$stopmotorI) > ) 
  = toFloat((($$motorsen) =b (val(elt("working"))))) .


  ---- Defining the initial state
  op initState : Nat -> Config .
  op initState : -> Config .
  rl initState => initState(counter) .

  eq initState(N:Nat) = init-machine('ctxMechanicalPress, 'MechanicalPressSystem) steps(0)  .
endm

eof

--- example of use
rew [1] initState .

