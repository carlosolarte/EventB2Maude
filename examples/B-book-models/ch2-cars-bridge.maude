
--- Module generated by B2Maude (2024-12-20)
--- Context: 
--- Machine: 

load ../../b2m-theory/ebmachine .

mod ctxCarBridge is
  inc EBMACHINE .

  --- Context: Sets and constants
  eq init-sets = 
  empty 
  .

  eq init-constants = 
   ('d |-> val(elt(10)))
  .

--- ===============================

--- VARIABLES 
 var $$a : EBType .
 var $$b : EBType .
 var $$c : EBType .

--- CONSTANTS 
 var $$d : EBType .

vars $$CNAME $$MNAME : Qid .
vars $$SEv $$SEv' : SEvent .
var  $$Sets : Map{Qid, EBSet} .
var  $$Cte  : Map{Qid, EBType} .
var  $$WEIGHT : Nat .
var  $$GUARD :  Bool . 

--- ===============================

  eq init-variables(  < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > )
   =
    ('a |-> val(elt(0))),
   ('b |-> val(elt(0))),
   ('c |-> val(elt(0))) .


----------------------------
--- Event MLIn
----------------------------

--- Activation of the Event MLIn
ceq [MLIn] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
  < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : ( ( $$SEv, ev('MLIn, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
  < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : (($$SEv, ev('MLIn, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
  < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : (($$SEv, ev('MLIn, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((val(elt(0))) < ($$c)) 
.

--- Change of state for event MLIn
rl [MLIn] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
  < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : ev('MLIn, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
    < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> ($$c) - (val(elt(1)))) , events : ev('MLIn, running) > 
    . 
----------------------------
--- Event MLOut
----------------------------

--- Activation of the Event MLOut
ceq [MLOut] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
  < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : ( ( $$SEv, ev('MLOut, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
  < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : (($$SEv, ev('MLOut, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
  < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : (($$SEv, ev('MLOut, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(((($$a) + ($$b)) < ($$d)) andb (($$c) =b (val(elt(0))))) 
.

--- Change of state for event MLOut
rl [MLOut] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
  < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : ev('MLOut, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
    < $$MNAME : Machine | variables : ('b |-> $$b , 'c |-> $$c , 'a |-> ($$a) + (val(elt(1)))) , events : ev('MLOut, running) > 
    . 
----------------------------
--- Event ILIn
----------------------------

--- Activation of the Event ILIn
ceq [ILIn] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
  < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : ( ( $$SEv, ev('ILIn, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
  < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : (($$SEv, ev('ILIn, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
  < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : (($$SEv, ev('ILIn, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((val(elt(0))) < ($$a)) 
.

--- Change of state for event ILIn
rl [ILIn] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
  < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : ev('ILIn, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
    < $$MNAME : Machine | variables : ('c |-> $$c , 'a |-> ($$a) - (val(elt(1))) , 'b |-> ($$b) + (val(elt(1)))) , events : ev('ILIn, running) > 
    . 
----------------------------
--- Event ILOut
----------------------------

--- Activation of the Event ILOut
ceq [ILOut] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
  < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : ( ( $$SEv, ev('ILOut, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
  < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : (($$SEv, ev('ILOut, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
  < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : (($$SEv, ev('ILOut, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(((val(elt(0))) < ($$b)) andb (($$a) =b (val(elt(0))))) 
.

--- Change of state for event ILOut
rl [ILOut] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
  < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : ev('ILOut, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) > 
    < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> ($$b) - (val(elt(1))) , 'c |-> ($$c) + (val(elt(1)))) , events : ev('ILOut, running) > 
    . 
  --- Initialization of events
  eq init-events = ev('MLIn, unknown),ev('MLOut, unknown),ev('ILIn, unknown),ev('ILOut, unknown) .


  --- ------------
  --- Properties  
  --- ------------
  var SYS : Configuration .


  --- This definition depends on the system
  --- Change 1.0 with, for instance,   float(ebset2nat($$n)) 
  --- eq val(1, Conf < $$MNAME : Machine | variables: ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : $$SEv > ) = 1.0 . 
  --- Properties can be also defined in the .b file with a section PROPERTIES


eq prop(1,   < $$CNAME : Context | sets : ($$Sets), constants : ('d |-> $$d) >  < $$MNAME : Machine | variables : ('a |-> $$a , 'b |-> $$b , 'c |-> $$c), events : $$SEv > ) 
  = toFloat(((($$a) =b (val(elt(0)))) orb (($$c) =b (val(elt(0)))))) .


  ---- Defining the initial state
  op initState : -> Configuration .
  eq initState = init-machine('ctxCarBridge, 'CarBridgeSystem) .
endm

eof

--- example of use

--- One step of rewriting
rew [1] initState . 

--- Search for all reachable states satisfying prop(1)
search initState =>* SYS such that SYS |= prop(1) .

--- Model Checking 
red modelCheck(initState, True) .

--- Umaudemc for stochastic model checking
umaudemc scheck file.maude initState formula.quatex

