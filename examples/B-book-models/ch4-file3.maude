
--- Module generated by B2Maude (2023-07-25)
--- Context: 
--- Machine: 

--- MAX-STEPS for the simulation: 10000

load ../../m-theory/ebmachine .

mod ctxFILE is
  inc EBMACHINE * (sort Configuration to Config) .

  --- Context: Sets and constants
  eq init-sets = 
  empty 
  .

  eq init-constants = 
   ('file |-> val( ( elt(1) |-> elt(1) , elt(2) |-> elt(2) , elt(3) |-> elt(3) , elt(4) |-> elt(4) ) )),
   ('N |-> val(elt(4)))
  .

--- ===============================

--- VARIABLES 
 var $$fileRec : EBType .
 var $$b : EBType .
 var $$s : EBType .
 var $$r : EBType .
 var $$d : EBType .

--- CONSTANTS 
 var $$file : EBType .
 var $$N : EBType .

vars $$CNAME $$MNAME : Qid .
vars $$LEv $$LEv' : LEvent .
var  $$Sets : Map{Qid, EBSet} .
var  $$Cte  : Map{Qid, EBType} .
var  $$WEIGHT : Nat .
var  $$GUARD :  Bool . 

--- ===============================

  eq init-variables(  < $$CNAME : Context | sets: ($$Sets), constants: ('file |-> $$file , 'N |-> $$N) > )
   =
    ('fileRec |-> val((empty).EBRel)),
   ('b |-> val(elt(false))),
   ('s |-> val(elt(1))),
   ('r |-> val(elt(1))),
   ('d |-> val(elt(0))) .


----------------------------
--- Event final
----------------------------

--- Activation of the Event final
ceq [final] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('file |-> $$file , 'N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileRec |-> $$fileRec , 'b |-> $$b , 's |-> $$s , 'r |-> $$r , 'd |-> $$d) > 
    < events  : Events  | state: ($$LEv ev('final, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('file |-> $$file , 'N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileRec |-> $$fileRec , 'b |-> $$b , 's |-> $$s , 'r |-> $$r , 'd |-> $$d) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('final, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('final, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((($$b) =b (val(elt(false)))) andb (($$r) =b (($$N) + (val(elt(1)))))) 
.

--- Change of state for event final
rl [final] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('file |-> $$file , 'N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileRec |-> $$fileRec , 'b |-> $$b , 's |-> $$s , 'r |-> $$r , 'd |-> $$d) > 
    < events  : Events  | state: ( ev('final, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('file |-> $$file , 'N |-> $$N) > 
    < $$MNAME : Machine | variables: ('fileRec |-> $$fileRec , 's |-> $$s , 'r |-> $$r , 'd |-> $$d , 'b |-> val(elt(true))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event receive
----------------------------

--- Activation of the Event receive
ceq [receive] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('file |-> $$file , 'N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileRec |-> $$fileRec , 'b |-> $$b , 's |-> $$s , 'r |-> $$r , 'd |-> $$d) > 
    < events  : Events  | state: ($$LEv ev('receive, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('file |-> $$file , 'N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileRec |-> $$fileRec , 'b |-> $$b , 's |-> $$s , 'r |-> $$r , 'd |-> $$d) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('receive, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('receive, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$s) =b (($$r) + (val(elt(1))))) 
.

--- Change of state for event receive
rl [receive] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('file |-> $$file , 'N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileRec |-> $$fileRec , 'b |-> $$b , 's |-> $$s , 'r |-> $$r , 'd |-> $$d) > 
    < events  : Events  | state: ( ev('receive, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('file |-> $$file , 'N |-> $$N) > 
    < $$MNAME : Machine | variables: ('b |-> $$b , 's |-> $$s , 'd |-> $$d , 'fileRec |-> union($$fileRec, val( ( $$r |-> $$d ) )) , 'r |-> ($$r) + (val(elt(1)))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event send
----------------------------

--- Activation of the Event send
ceq [send] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('file |-> $$file , 'N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileRec |-> $$fileRec , 'b |-> $$b , 's |-> $$s , 'r |-> $$r , 'd |-> $$d) > 
    < events  : Events  | state: ($$LEv ev('send, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('file |-> $$file , 'N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileRec |-> $$fileRec , 'b |-> $$b , 's |-> $$s , 'r |-> $$r , 'd |-> $$d) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('send, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('send, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((($$s) =b ($$r)) andb (($$r) <>b (($$N) + (val(elt(1)))))) 
.

--- Change of state for event send
rl [send] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('file |-> $$file , 'N |-> $$N) > 
  < $$MNAME : Machine | variables: ('fileRec |-> $$fileRec , 'b |-> $$b , 's |-> $$s , 'r |-> $$r , 'd |-> $$d) > 
    < events  : Events  | state: ( ev('send, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('file |-> $$file , 'N |-> $$N) > 
    < $$MNAME : Machine | variables: ('fileRec |-> $$fileRec , 'b |-> $$b , 'r |-> $$r , 'd |-> ($$file ) ($$s) , 's |-> ($$s) + (val(elt(1)))) > 
    < events : Events | state: init-events >
    .


  --- Initialization of events
  eq init-events = ev('final, unknown) ev('receive, unknown) ev('send, unknown) .

  --- Rule for choosing the next event to be executed
  --- It stops when the system is in a deadlock or the limit 
  --- MAX-STEPS is reached. 
  var nsteps : Nat .
  crl [next-event] :
     < events : Events | state: ($$LEv) > 
     steps(nsteps)
     =>
     < events : Events | state: choose-event($$LEv') >
     steps(nsteps + 1)
  if
        nsteps <= MAX-STEPS
    /\  not-unknown($$LEv) --- all the guards have been checked
    /\  one-firable($$LEv) --- one of the events is firable
    /\  $$LEv' := accumulate(enabled-events($$LEv)) --- extract the enabled events and accumulate
  .

  --- --------------------------
  --- PVesTa -------------------
  --- --------------------------
  var Conf : Config .
  op tick : Config -> Config .
  eq tick( Conf )  = Conf .
  op MAX-STEPS : -> Nat .
  eq MAX-STEPS = 10000 .
  op steps : Nat -> Config .

  --- Observable properties
  op val : Nat Config -> Float .

  --- Simulation steps
  eq val(0, Conf steps(N:Nat) ) = float(N:Nat) .

  --- This definition depends on the system
  --- Change 1.0 with, for instance,   float(ebset2nat($$n)) 
  --- eq val(1, Conf < $$MNAME : Machine | variables: ('fileRec |-> $$fileRec , 'b |-> $$b , 's |-> $$s , 'r |-> $$r , 'd |-> $$d) > ) = 1.0 . 
  --- Properties can be also defined in the .b file with a section PROPERTIES


eq val(1, Conf < $$MNAME : Machine | variables: ('fileRec |-> $$fileRec , 'b |-> $$b , 's |-> $$s , 'r |-> $$r , 'd |-> $$d) > ) 
  = toFloat(($$b)) .

eq val(2, Conf < $$MNAME : Machine | variables: ('fileRec |-> $$fileRec , 'b |-> $$b , 's |-> $$s , 'r |-> $$r , 'd |-> $$d) > ) 
  = toFloat(($$s)) .

eq val(3, Conf < $$MNAME : Machine | variables: ('fileRec |-> $$fileRec , 'b |-> $$b , 's |-> $$s , 'r |-> $$r , 'd |-> $$d) > ) 
  = toFloat(($$r)) .


  ---- Defining the initial state
  op initState : Nat -> Config .
  op initState : -> Config .
  rl initState => initState(counter) .

  eq initState(N:Nat) = init-machine('ctxFILE, 'FILE) steps(0)  .
endm

eof

--- example of use
rew [1] initState .

