
--- Module generated by B2Maude (2024-12-20)
--- Context: 
--- Machine: 

load ../../b2m-theory/ebmachine .

mod ctxRW is
  inc EBMACHINE .

  --- Context: Sets and constants
  eq init-sets = 
   ('D |-> gen-set(("d0" "d1" "d2" "d3" "d4")))
  .

  eq init-constants = 
  empty 
  .

--- ===============================

--- VARIABLES 
 var $$w : EBType .
 var $$r : EBType .
 var $$wt : EBType .
 var $$f : EBType .
 var $$g : EBType .

--- CONSTANTS 

vars $$CNAME $$MNAME : Qid .
vars $$SEv $$SEv' : SEvent .
var  $$Sets : Map{Qid, EBSet} .
var  $$Cte  : Map{Qid, EBType} .
var  $$WEIGHT : Nat .
var  $$GUARD :  Bool . 

--- ===============================

  eq init-variables(  < $$CNAME : Context | sets : ($$Sets), constants : (empty) > )
   =
    ('w |-> val(elt(1))),
   ('r |-> val(elt(1))),
   ('wt |-> val( ( elt(1) |-> elt("d0") ) )),
   ('f |-> val( ( elt(1) |-> elt(1) ) )),
   ('g |-> val( ( elt(1) |-> elt(1) ) )) .


----------------------------
--- Event write
----------------------------

--- Activation of the Event write
ceq [write] :
    < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
  < $$MNAME : Machine | variables : ('w |-> $$w , 'r |-> $$r , 'wt |-> $$wt , 'f |-> $$f , 'g |-> $$g), events : ( ( $$SEv, ev('write, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
  < $$MNAME : Machine | variables : ('w |-> $$w , 'r |-> $$r , 'wt |-> $$wt , 'f |-> $$f , 'g |-> $$g), events : (($$SEv, ev('write, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
  < $$MNAME : Machine | variables : ('w |-> $$w , 'r |-> $$r , 'wt |-> $$wt , 'f |-> $$f , 'g |-> $$g), events : (($$SEv, ev('write, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(val(elt(true)))  and  is-empty( (val(elt("d0")) ! val(elt("d1")) ! val(elt("d2")) ! val(elt("d3")) ! val(elt("d4")) !) ) == false 
.

--- Change of state for event write
rl [write] : 
    < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
  < $$MNAME : Machine | variables : ('w |-> $$w , 'r |-> $$r , 'wt |-> $$wt , 'f |-> $$f , 'g |-> $$g), events : ev('write, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
    < $$MNAME : Machine | variables : ('r |-> $$r , 'f |-> $$f , 'g |-> $$g , 'w |-> ($$w) + (val(elt(1))) , 'wt |-> overr($$wt, val( ( ($$w) + (val(elt(1))) |-> choice(val(elt("d0")) ! val(elt("d1")) ! val(elt("d2")) ! val(elt("d3")) ! val(elt("d4")) !) ) ))) , events : ev('write, running) > 
    . 
----------------------------
--- Event read
----------------------------

--- Activation of the Event read
ceq [read] :
    < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
  < $$MNAME : Machine | variables : ('w |-> $$w , 'r |-> $$r , 'wt |-> $$wt , 'f |-> $$f , 'g |-> $$g), events : ( ( $$SEv, ev('read, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
  < $$MNAME : Machine | variables : ('w |-> $$w , 'r |-> $$r , 'wt |-> $$wt , 'f |-> $$f , 'g |-> $$g), events : (($$SEv, ev('read, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
  < $$MNAME : Machine | variables : ('w |-> $$w , 'r |-> $$r , 'wt |-> $$wt , 'f |-> $$f , 'g |-> $$g), events : (($$SEv, ev('read, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(val(elt(true)))  and ebset2nat(($$g ) ($$r)) <= ebset2nat($$w)
.

--- Change of state for event read
rl [read] : 
    < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
  < $$MNAME : Machine | variables : ('w |-> $$w , 'r |-> $$r , 'wt |-> $$wt , 'f |-> $$f , 'g |-> $$g), events : ev('read, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : (empty) > 
    < $$MNAME : Machine | variables : ('w |-> $$w , 'wt |-> $$wt , 'r |-> ($$r) + (val(elt(1))) , 'f |-> overr($$f, val( ( ($$r) + (val(elt(1))) |-> choice(($$g ) ($$r), $$w) ) )) , 'g |-> overr($$g, val( ( ($$r) + (val(elt(1))) |-> $$w ) ))) , events : ev('read, running) > 
    . 
  --- Initialization of events
  eq init-events = ev('write, unknown),ev('read, unknown) .


  --- ------------
  --- Properties  
  --- ------------
  var SYS : Configuration .


  --- This definition depends on the system
  --- Change 1.0 with, for instance,   float(ebset2nat($$n)) 
  --- eq val(1, Conf < $$MNAME : Machine | variables: ('w |-> $$w , 'r |-> $$r , 'wt |-> $$wt , 'f |-> $$f , 'g |-> $$g), events : $$SEv > ) = 1.0 . 
  --- Properties can be also defined in the .b file with a section PROPERTIES


eq prop(1,   < $$CNAME : Context | sets : ($$Sets), constants : (empty) >  < $$MNAME : Machine | variables : ('w |-> $$w , 'r |-> $$r , 'wt |-> $$wt , 'f |-> $$f , 'g |-> $$g), events : $$SEv > ) 
  = toFloat(($$r)) .


  ---- Defining the initial state
  op initState : -> Configuration .
  eq initState = init-machine('ctxRW, 'RW) .
endm

eof

--- example of use

--- One step of rewriting
rew [1] initState . 

--- Search for all reachable states satisfying prop(1)
search initState =>* SYS such that SYS |= prop(1) .

--- Model Checking 
red modelCheck(initState, True) .

--- Umaudemc for stochastic model checking
umaudemc scheck file.maude initState formula.quatex

