
--- Module generated by B2Maude (2022-05-05)
--- Context: 
--- Machine: 

--- MAX-STEPS for the simulation: 10000

load ../m-theory/ebmachine .

mod ctxBRTP is
  inc EBMACHINE * (sort Configuration to Config) .

  --- Context: Sets and constants
  eq init-sets = 
   ('STATE |-> gen-set(("working" "success" "failure"))),
   ('DATA |-> gen-set(("D1" "D2")))
  .

  eq init-constants = 
   ('N |-> val(elt(100))),
   ('MAX |-> val(elt(20)))
  .

--- ===============================

--- VARIABLES 
 var $$r : EBType .
 var $$g : EBType .
 var $$rst : EBType .
 var $$sst : EBType .
 var $$s : EBType .
 var $$d : EBType .
 var $$w : EBType .
 var $$db : EBType .
 var $$ab : EBType .
 var $$v : EBType .
 var $$l : EBType .
 var $$c : EBType .

--- CONSTANTS 
 var $$N : EBType .
 var $$MAX : EBType .

vars $$CNAME $$MNAME : Qid .
vars $$LEv $$LEv' : LEvent .
var  $$Sets : Map{Qid, EBSet} .
var  $$Cte  : Map{Qid, EBType} .
var  $$WEIGHT : Nat .
var  $$GUARD :  Bool . 

--- ===============================

  eq init-variables(  < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > )
   =
    ('r |-> val(elt(0))),
   ('g |-> val((empty).EBRel)),
   ('rst |-> val(elt("working"))),
   ('sst |-> val(elt("working"))),
   ('s |-> val(elt(0))),
   ('d |-> val(elt("D1"))),
   ('w |-> val(elt(true))),
   ('db |-> val(elt(false))),
   ('ab |-> val(elt(false))),
   ('v |-> val(elt(false))),
   ('l |-> val(elt(false))),
   ('c |-> val(elt(0))) .


----------------------------
--- Event SNDsndcurrentdata
----------------------------

--- Activation of the Event SNDsndcurrentdata
ceq [SNDsndcurrentdata] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ($$LEv ev('SNDsndcurrentdata, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('SNDsndcurrentdata, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('SNDsndcurrentdata, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(((($$sst) =b (val(elt("working")))) andb (($$w) =b (val(elt(true))))) andb ((($$s) + (val(elt(1)))) < ($$N))) 
.

--- Change of state for event SNDsndcurrentdata
rl [SNDsndcurrentdata] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ( ev('SNDsndcurrentdata, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
    < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'ab |-> $$ab , 'v |-> $$v , 'c |-> $$c , 'd |-> val(elt("D2")) , 'w |-> val(elt(false)) , 'db |-> val(elt(true)) , 'l |-> val(elt(false))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event SNDsndlastdata
----------------------------

--- Activation of the Event SNDsndlastdata
ceq [SNDsndlastdata] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ($$LEv ev('SNDsndlastdata, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('SNDsndlastdata, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('SNDsndlastdata, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(((($$sst) =b (val(elt("working")))) andb (($$w) =b (val(elt(true))))) andb ((($$s) + (val(elt(1)))) =b ($$N))) 
.

--- Change of state for event SNDsndlastdata
rl [SNDsndlastdata] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ( ev('SNDsndlastdata, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
    < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'ab |-> $$ab , 'v |-> $$v , 'c |-> $$c , 'd |-> val(elt("D2")) , 'w |-> val(elt(false)) , 'db |-> val(elt(true)) , 'l |-> val(elt(true))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event RCVrcvcurdata
----------------------------

--- Activation of the Event RCVrcvcurdata
ceq [RCVrcvcurdata] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ($$LEv ev('RCVrcvcurdata, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('RCVrcvcurdata, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('RCVrcvcurdata, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((((($$rst) =b (val(elt("working")))) andb (($$db) =b (val(elt(true))))) andb (($$r) =b ($$s))) andb (($$l) =b (val(elt(false))))) 
.

--- Change of state for event RCVrcvcurdata
rl [RCVrcvcurdata] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ( ev('RCVrcvcurdata, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
    < $$MNAME : Machine | variables: ('rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'ab |-> $$ab , 'l |-> $$l , 'c |-> $$c , 'r |-> ($$r) + (val(elt(1))) , 'g |-> overr($$g, val( ( $$r |-> $$d ) )) , 'db |-> val(elt(false)) , 'v |-> val(elt(true))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event RCVsuccess
----------------------------

--- Activation of the Event RCVsuccess
ceq [RCVsuccess] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ($$LEv ev('RCVsuccess, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('RCVsuccess, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('RCVsuccess, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((((($$rst) =b (val(elt("working")))) andb (($$db) =b (val(elt(true))))) andb (($$r) =b ($$s))) andb (($$l) =b (val(elt(true))))) 
.

--- Change of state for event RCVsuccess
rl [RCVsuccess] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ( ev('RCVsuccess, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
    < $$MNAME : Machine | variables: ('sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'ab |-> $$ab , 'l |-> $$l , 'c |-> $$c , 'rst |-> val(elt("success")) , 'r |-> ($$r) + (val(elt(1))) , 'g |-> overr($$g, val( ( $$r |-> $$d ) )) , 'db |-> val(elt(false)) , 'v |-> val(elt(true))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event RCVrcvretry
----------------------------

--- Activation of the Event RCVrcvretry
ceq [RCVrcvretry] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ($$LEv ev('RCVrcvretry, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('RCVrcvretry, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('RCVrcvretry, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((($$db) =b (val(elt(true)))) andb (($$r) <>b ($$s))) 
.

--- Change of state for event RCVrcvretry
rl [RCVrcvretry] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ( ev('RCVrcvretry, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
    < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'ab |-> $$ab , 'l |-> $$l , 'c |-> $$c , 'db |-> val(elt(false)) , 'v |-> val(elt(true))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event RCVsndack
----------------------------

--- Activation of the Event RCVsndack
ceq [RCVsndack] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ($$LEv ev('RCVsndack, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('RCVsndack, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('RCVsndack, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$v) =b (val(elt(true)))) 
.

--- Change of state for event RCVsndack
rl [RCVsndack] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ( ev('RCVsndack, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
    < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'l |-> $$l , 'c |-> $$c , 'v |-> val(elt(false)) , 'ab |-> val(elt(true))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event SNDrcvcuracl
----------------------------

--- Activation of the Event SNDrcvcuracl
ceq [SNDrcvcuracl] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ($$LEv ev('SNDrcvcuracl, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('SNDrcvcuracl, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('SNDrcvcuracl, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(((($$sst) =b (val(elt("working")))) andb (($$ab) =b (val(elt(true))))) andb ((($$s) + (val(elt(1)))) < ($$N))) 
.

--- Change of state for event SNDrcvcuracl
rl [SNDrcvcuracl] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ( ev('SNDrcvcuracl, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
    < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 'd |-> $$d , 'db |-> $$db , 'v |-> $$v , 'l |-> $$l , 'w |-> val(elt(true)) , 's |-> ($$s) + (val(elt(1))) , 'c |-> val(elt(0)) , 'ab |-> val(elt(false))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event SNDsuccess
----------------------------

--- Activation of the Event SNDsuccess
ceq [SNDsuccess] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ($$LEv ev('SNDsuccess, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('SNDsuccess, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('SNDsuccess, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(((($$sst) =b (val(elt("working")))) andb (($$ab) =b (val(elt(true))))) andb ((($$s) + (val(elt(1)))) =b ($$N))) 
.

--- Change of state for event SNDsuccess
rl [SNDsuccess] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ( ev('SNDsuccess, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
    < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'v |-> $$v , 'l |-> $$l , 'sst |-> val(elt("success")) , 'c |-> val(elt(0)) , 'ab |-> val(elt(false))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event DMNdatach
----------------------------

--- Activation of the Event DMNdatach
ceq [DMNdatach] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ($$LEv ev('DMNdatach, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('DMNdatach, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('DMNdatach, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$db) =b (val(elt(true)))) 
.

--- Change of state for event DMNdatach
rl [DMNdatach] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ( ev('DMNdatach, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
    < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c , 'db |-> val(elt(false))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event DMNack
----------------------------

--- Activation of the Event DMNack
ceq [DMNack] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ($$LEv ev('DMNack, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('DMNack, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('DMNack, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$ab) =b (val(elt(true)))) 
.

--- Change of state for event DMNack
rl [DMNack] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ( ev('DMNack, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
    < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c , 'ab |-> val(elt(false))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event SNDtimeout
----------------------------

--- Activation of the Event SNDtimeout
ceq [SNDtimeout] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ($$LEv ev('SNDtimeout, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('SNDtimeout, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('SNDtimeout, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((((((($$sst) =b (val(elt("working")))) andb (($$w) =b (val(elt(false))))) andb (($$ab) =b (val(elt(false))))) andb (($$db) =b (val(elt(false))))) andb (($$v) =b (val(elt(false))))) andb (($$c) < ($$MAX))) 
.

--- Change of state for event SNDtimeout
rl [SNDtimeout] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ( ev('SNDtimeout, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
    < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'w |-> val(elt(true)) , 'c |-> ($$c) + (val(elt(1)))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event SNDfailure
----------------------------

--- Activation of the Event SNDfailure
ceq [SNDfailure] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ($$LEv ev('SNDfailure, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('SNDfailure, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('SNDfailure, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((((((($$sst) =b (val(elt("working")))) andb (($$w) =b (val(elt(false))))) andb (($$ab) =b (val(elt(false))))) andb (($$db) =b (val(elt(false))))) andb (($$v) =b (val(elt(false))))) andb (($$c) =b ($$MAX))) 
.

--- Change of state for event SNDfailure
rl [SNDfailure] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ( ev('SNDfailure, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
    < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'sst |-> val(elt("failure")) , 'c |-> ($$c) + (val(elt(1)))) > 
    < events : Events | state: init-events >
    .


----------------------------
--- Event RCVfailure
----------------------------

--- Activation of the Event RCVfailure
ceq [RCVfailure] :
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ($$LEv ev('RCVfailure, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('RCVfailure, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('RCVfailure, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((($$rst) =b (val(elt("working")))) andb (($$c) =b (($$MAX) + (val(elt(1)))))) 
.

--- Change of state for event RCVfailure
rl [RCVfailure] : 
    < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
  < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > 
    < events  : Events  | state: ( ev('RCVfailure, execute) ) >
    =>
      < $$CNAME : Context | sets: ($$Sets), constants: ('N |-> $$N , 'MAX |-> $$MAX) > 
    < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c , 'rst |-> val(elt("failure"))) > 
    < events : Events | state: init-events >
    .


  --- Initialization of events
  eq init-events = ev('SNDsndcurrentdata, unknown) ev('SNDsndlastdata, unknown) ev('RCVrcvcurdata, unknown) ev('RCVsuccess, unknown) ev('RCVrcvretry, unknown) ev('RCVsndack, unknown) ev('SNDrcvcuracl, unknown) ev('SNDsuccess, unknown) ev('DMNdatach, unknown) ev('DMNack, unknown) ev('SNDtimeout, unknown) ev('SNDfailure, unknown) ev('RCVfailure, unknown) .

  --- Rule for choosing the next event to be executed
  --- It stops when the system is in a deadlock or the limit 
  --- MAX-STEPS is reached. 
  var nsteps : Nat .
  crl [next-event] :
     < events : Events | state: ($$LEv) > 
     steps(nsteps)
     =>
     < events : Events | state: choose-event($$LEv') >
     steps(nsteps + 1)
  if
        nsteps <= MAX-STEPS
    /\  not-unknown($$LEv) --- all the guards have been checked
    /\  one-firable($$LEv) --- one of the events is firable
    /\  $$LEv' := accumulate(enabled-events($$LEv)) --- extract the enabled events and accumulate
  .

  --- --------------------------
  --- PVesTa -------------------
  --- --------------------------
  var Conf : Config .
  op tick : Config -> Config .
  eq tick( Conf )  = Conf .
  op MAX-STEPS : -> Nat .
  eq MAX-STEPS = 10000 .
  op steps : Nat -> Config .

  --- Observable properties
  op val : Nat Config -> Float .

  --- Simulation steps
  eq val(0, Conf steps(N:Nat) ) = float(N:Nat) .

  --- This definition depends on the system
  --- Change 1.0 with, for instance,   float(ebset2nat($$n)) 
  --- eq val(1, Conf < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > ) = 1.0 . 
  --- Properties can be also defined in the .b file with a section PROPERTIES


eq val(1, Conf < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > ) 
  = toFloat(((($$sst) =b (val(elt("failure")))) andb (($$rst) =b (val(elt("failure")))))) .

eq val(2, Conf < $$MNAME : Machine | variables: ('r |-> $$r , 'g |-> $$g , 'rst |-> $$rst , 'sst |-> $$sst , 's |-> $$s , 'd |-> $$d , 'w |-> $$w , 'db |-> $$db , 'ab |-> $$ab , 'v |-> $$v , 'l |-> $$l , 'c |-> $$c) > ) 
  = toFloat(((($$sst) =b (val(elt("success")))) andb (($$rst) =b (val(elt("success")))))) .


  ---- Defining the initial state
  op initState : Nat -> Config .
  op initState : -> Config .
  rl initState => initState(counter) .

  eq initState(N:Nat) = init-machine('ctxBRTP, 'BRTP) steps(0)  .
endm

eof

--- example of use
rew [1] initState .

