
--- Module generated by B2Maude (2024-12-20)
--- Context: 
--- Machine: 

load ../../b2m-theory/ebmachine .

mod ctxP2P is
  inc EBMACHINE .

  --- Context: Sets and constants
  eq init-sets = 
   ('STATE |-> gen-set(("emp" "ok" "sending")))
  .

  eq init-constants = 
   ('N |-> val(elt(5))),
   ('K |-> val(elt(10)))
  .

--- ===============================

--- VARIABLES 
 var $$file : EBType .
 var $$n : EBType .
 var $$done : EBType .

--- CONSTANTS 
 var $$N : EBType .
 var $$K : EBType .

vars $$CNAME $$MNAME : Qid .
vars $$SEv $$SEv' : SEvent .
var  $$Sets : Map{Qid, EBSet} .
var  $$Cte  : Map{Qid, EBType} .
var  $$WEIGHT : Nat .
var  $$GUARD :  Bool . 

--- ===============================

  eq init-variables(  < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > )
   =
    ('file |-> make-rel(val(ebset2nat(val(elt(0))) ..  ebset2nat( ( (($$N) * ($$K)) - (val(elt(1))) ))), val( ( elt("emp") ) ))),
   ('n |-> val(elt(0))),
   ('done |-> val(elt(false))) .


----------------------------
--- Event sent
----------------------------

--- Activation of the Event sent
ceq [sent] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : ( ( $$SEv, ev('sent, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : (($$SEv, ev('sent, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : (($$SEv, ev('sent, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat((($$N) * ($$K)) - (card(ran-res($$file, val( ( elt("sending") ) ))))) 
     /\ $$GUARD  := ebset2bool(val(elt(true)))  and  is-empty( ( $$filter1((dom(ran-res($$file, val( ( elt("emp") ) )))), (< $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : noevent > ))) ) == false 
.

--- Change of state for event sent
rl [sent] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : ev('sent, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
    < $$MNAME : Machine | variables : ('done |-> $$done , 'file |-> overr($$file, val( ( choice( $$filter1((dom(ran-res($$file, val( ( elt("emp") ) )))), (< $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : noevent > ))) |-> elt("sending") ) )) , 'n |-> ($$n) + (val(elt(1)))) , events : ev('sent, running) > 
    . 
----------------------------
--- Event receive
----------------------------

--- Activation of the Event receive
ceq [receive] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : ( ( $$SEv, ev('receive, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : (($$SEv, ev('receive, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : (($$SEv, ev('receive, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat((val(elt(1))) + (card(ran-res($$file, val( ( elt("ok") ) ))))) 
     /\ $$GUARD  := ebset2bool(val(elt(true)))  and  is-empty( (dom(ran-res($$file, val( ( elt("sending") ) )))) ) == false 
.

--- Change of state for event receive
rl [receive] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : ev('receive, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
    < $$MNAME : Machine | variables : ('n |-> $$n , 'done |-> $$done , 'file |-> overr($$file, val( ( choice(dom(ran-res($$file, val( ( elt("sending") ) )))) |-> elt("ok") ) ))) , events : ev('receive, running) > 
    . 
----------------------------
--- Event fail
----------------------------

--- Activation of the Event fail
ceq [fail] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : ( ( $$SEv, ev('fail, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : (($$SEv, ev('fail, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : (($$SEv, ev('fail, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat((($$N) * ($$K)) - (card(ran-res($$file, val( ( elt("ok") ) ))))) 
     /\ $$GUARD  := ebset2bool(val(elt(true)))  and  is-empty( (dom(ran-res($$file, val( ( elt("sending") ) )))) ) == false 
.

--- Change of state for event fail
rl [fail] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : ev('fail, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
    < $$MNAME : Machine | variables : ('n |-> $$n , 'done |-> $$done , 'file |-> choice( $$file @ 0.6   ( overr($$file, val( ( choice(dom(ran-res($$file, val( ( elt("sending") ) )))) |-> elt("emp") ) )) ) @ 0.4)) , events : ev('fail, running) > 
    . 
----------------------------
--- Event finish
----------------------------

--- Activation of the Event finish
ceq [finish] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : ( ( $$SEv, ev('finish, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : (($$SEv, ev('finish, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : (($$SEv, ev('finish, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(( ( ($$done) =b (val(elt(false))) )) andb ( ( (card(ran-res($$file, val( ( elt("ok") ) )))) =b (($$N) * ($$K)) ))) 
.

--- Change of state for event finish
rl [finish] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : ev('finish, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
    < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> val(elt(true))) , events : ev('finish, running) > 
    . --- Auxiliary map-like functions

var $$lbd1  : EBType . 
var $$lbdn1 : Nat . 
var $$lbdS1 : EBSet . 
op $$filter1   : EBType Configuration -> EBType .
eq $$filter1(val( (empty).EBSet), C:Configuration) = val( (empty).EBSet) .
eq $$filter1(val( (elt($$lbdn1), $$lbdS1)), (< $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : noevent > )) =
   if ebset2bool( ( ( ( (val(elt($$lbdn1))) rem ($$N) )) nin ( $$map2((dom(ran-res($$file, val( ( elt("sending") ) )))), (< $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : noevent > ))) )) 
   then union(val(elt($$lbdn1)), $$filter1(val($$lbdS1),< $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : noevent > ))
   else $$filter1(val($$lbdS1),< $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : noevent > )
   fi .

var $$lbd2  : EBType .
var $$lbdn2 : Nat . 
var $$lbdS2 : EBSet . 
op $$map2   : EBType Configuration -> EBType .
eq $$map2(val( (empty).EBSet), C:Configuration) = val( (empty).EBSet) .
eq $$map2(val( (elt($$lbdn2), $$lbdS2)), (< $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : noevent > )) =
 union(((val(elt($$lbdn2))) rem ($$N)), $$map2(val($$lbdS2),< $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) > 
  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : noevent > )) . 

--- ---------------------------

  --- Initialization of events
  eq init-events = ev('sent, unknown),ev('receive, unknown),ev('fail, unknown),ev('finish, unknown) .


  --- ------------
  --- Properties  
  --- ------------
  var SYS : Configuration .


  --- This definition depends on the system
  --- Change 1.0 with, for instance,   float(ebset2nat($$n)) 
  --- eq val(1, Conf < $$MNAME : Machine | variables: ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : $$SEv > ) = 1.0 . 
  --- Properties can be also defined in the .b file with a section PROPERTIES


eq prop(1,   < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) >  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : $$SEv > ) 
  = toFloat(($$n)) .

eq prop(2,   < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N , 'K |-> $$K) >  < $$MNAME : Machine | variables : ('file |-> $$file , 'n |-> $$n , 'done |-> $$done), events : $$SEv > ) 
  = toFloat(($$done)) .


  ---- Defining the initial state
  op initState : -> Configuration .
  eq initState = init-machine('ctxP2P, 'P2P) .
endm

eof

--- example of use

--- One step of rewriting
rew [1] initState . 

--- Search for all reachable states satisfying prop(1)
search initState =>* SYS such that SYS |= prop(1) .

--- Model Checking 
red modelCheck(initState, True) .

--- Umaudemc for stochastic model checking
umaudemc scheck file.maude initState formula.quatex

