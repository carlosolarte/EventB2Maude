
--- Module generated by B2Maude (2024-12-20)
--- Context: 
--- Machine: 

load ../../b2m-theory/ebmachine .

mod ctxBrakeSystem is
  inc EBMACHINE .

  --- Context: Sets and constants
  eq init-sets = 
   ('SPEDAL |-> gen-set(("up" "down"))),
   ('SBRAKE |-> gen-set(("applied" "released")))
  .

  eq init-constants = 
   ('MAXWEAR |-> val(elt(10)))
  .

--- ===============================

--- VARIABLES 
 var $$pedal : EBType .
 var $$brake : EBType .
 var $$wear : EBType .

--- CONSTANTS 
 var $$MAXWEAR : EBType .

vars $$CNAME $$MNAME : Qid .
vars $$SEv $$SEv' : SEvent .
var  $$Sets : Map{Qid, EBSet} .
var  $$Cte  : Map{Qid, EBType} .
var  $$WEIGHT : Nat .
var  $$GUARD :  Bool . 

--- ===============================

  eq init-variables(  < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > )
   =
    ('pedal |-> val(elt("up"))),
   ('brake |-> val(elt("released"))),
   ('wear |-> val(elt(0))) .


----------------------------
--- Event PushPedal
----------------------------

--- Activation of the Event PushPedal
ceq [PushPedal] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : ( ( $$SEv, ev('PushPedal, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : (($$SEv, ev('PushPedal, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : (($$SEv, ev('PushPedal, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat($$MAXWEAR) 
     /\ $$GUARD  := ebset2bool(($$pedal) =b (val(elt("up")))) 
.

--- Change of state for event PushPedal
rl [PushPedal] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : ev('PushPedal, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
    < $$MNAME : Machine | variables : ('brake |-> $$brake , 'wear |-> $$wear , 'pedal |-> choice( val(elt("down")) @ 0.9  val(elt("up")) @ 0.1)) , events : ev('PushPedal, running) > 
    . 
----------------------------
--- Event ReleasePedal
----------------------------

--- Activation of the Event ReleasePedal
ceq [ReleasePedal] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : ( ( $$SEv, ev('ReleasePedal, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : (($$SEv, ev('ReleasePedal, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : (($$SEv, ev('ReleasePedal, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat($$MAXWEAR) 
     /\ $$GUARD  := ebset2bool(($$pedal) =b (val(elt("down")))) 
.

--- Change of state for event ReleasePedal
rl [ReleasePedal] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : ev('ReleasePedal, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
    < $$MNAME : Machine | variables : ('brake |-> $$brake , 'wear |-> $$wear , 'pedal |-> val(elt("up"))) , events : ev('ReleasePedal, running) > 
    . 
----------------------------
--- Event ApplyBrake
----------------------------

--- Activation of the Event ApplyBrake
ceq [ApplyBrake] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : ( ( $$SEv, ev('ApplyBrake, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : (($$SEv, ev('ApplyBrake, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : (($$SEv, ev('ApplyBrake, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat(($$MAXWEAR) - ($$wear)) 
     /\ $$GUARD  := ebset2bool((($$pedal) =b (val(elt("down")))) andb (($$brake) =b (val(elt("released"))))) 
.

--- Change of state for event ApplyBrake
rl [ApplyBrake] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : ev('ApplyBrake, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
    < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> val(elt("applied")) , 'wear |-> ($$wear) + (val(elt(1)))) , events : ev('ApplyBrake, running) > 
    . 
----------------------------
--- Event ApplyBrakeFailure
----------------------------

--- Activation of the Event ApplyBrakeFailure
ceq [ApplyBrakeFailure] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : ( ( $$SEv, ev('ApplyBrakeFailure, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : (($$SEv, ev('ApplyBrakeFailure, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : (($$SEv, ev('ApplyBrakeFailure, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat($$wear) 
     /\ $$GUARD  := ebset2bool((($$pedal) =b (val(elt("down")))) andb (($$brake) =b (val(elt("released"))))) 
.

--- Change of state for event ApplyBrakeFailure
rl [ApplyBrakeFailure] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : ev('ApplyBrakeFailure, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
    < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'wear |-> $$wear , 'brake |-> val(elt("released"))) , events : ev('ApplyBrakeFailure, running) > 
    . 
----------------------------
--- Event ReleaseBrake
----------------------------

--- Activation of the Event ReleaseBrake
ceq [ReleaseBrake] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : ( ( $$SEv, ev('ReleaseBrake, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : (($$SEv, ev('ReleaseBrake, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : (($$SEv, ev('ReleaseBrake, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat(($$MAXWEAR) - ($$wear)) 
     /\ $$GUARD  := ebset2bool((($$pedal) =b (val(elt("up")))) andb (($$brake) =b (val(elt("applied"))))) 
.

--- Change of state for event ReleaseBrake
rl [ReleaseBrake] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : ev('ReleaseBrake, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) > 
    < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'wear |-> $$wear , 'brake |-> val(elt("released"))) , events : ev('ReleaseBrake, running) > 
    . 
  --- Initialization of events
  eq init-events = ev('PushPedal, unknown),ev('ReleasePedal, unknown),ev('ApplyBrake, unknown),ev('ApplyBrakeFailure, unknown),ev('ReleaseBrake, unknown) .


  --- ------------
  --- Properties  
  --- ------------
  var SYS : Configuration .


  --- This definition depends on the system
  --- Change 1.0 with, for instance,   float(ebset2nat($$n)) 
  --- eq val(1, Conf < $$MNAME : Machine | variables: ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : $$SEv > ) = 1.0 . 
  --- Properties can be also defined in the .b file with a section PROPERTIES


eq prop(1,   < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) >  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : $$SEv > ) 
  = toFloat((($$brake) =b (val(elt("applied"))))) .

eq prop(2,   < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) >  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : $$SEv > ) 
  = toFloat(($$wear)) .

eq prop(3,   < $$CNAME : Context | sets : ($$Sets), constants : ('MAXWEAR |-> $$MAXWEAR) >  < $$MNAME : Machine | variables : ('pedal |-> $$pedal , 'brake |-> $$brake , 'wear |-> $$wear), events : $$SEv > ) 
  = toFloat((($$wear) <= ($$MAXWEAR))) .


  ---- Defining the initial state
  op initState : -> Configuration .
  eq initState = init-machine('ctxBrakeSystem, 'BrakeSystem) .
endm

eof

--- example of use

--- One step of rewriting
rew [1] initState . 

--- Search for all reachable states satisfying prop(1)
search initState =>* SYS such that SYS |= prop(1) .

--- Model Checking 
red modelCheck(initState, True) .

