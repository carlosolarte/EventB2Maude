
--- Module generated by B2Maude (2024-12-20)
--- Context: 
--- Machine: 

load ../../b2m-theory/ebmachine .

mod ctxBRTP is
  inc EBMACHINE .

  --- Context: Sets and constants
  eq init-sets = 
   ('STATE |-> gen-set(("working" "success" "failure"))),
   ('DATA |-> gen-set(("D1" "D2")))
  .

  eq init-constants = 
   ('N |-> val(elt(100)))
  .

--- ===============================

--- VARIABLES 
 var $$fileR : EBType .
 var $$counterR : EBType .
 var $$counterS : EBType .
 var $$stateR : EBType .
 var $$stateS : EBType .
 var $$W : EBType .
 var $$D : EBType .

--- CONSTANTS 
 var $$N : EBType .

vars $$CNAME $$MNAME : Qid .
vars $$SEv $$SEv' : SEvent .
var  $$Sets : Map{Qid, EBSet} .
var  $$Cte  : Map{Qid, EBType} .
var  $$WEIGHT : Nat .
var  $$GUARD :  Bool . 

--- ===============================

  eq init-variables(  < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > )
   =
    ('fileR |-> val((empty).EBRel)),
   ('counterR |-> val(elt(0))),
   ('counterS |-> val(elt(0))),
   ('stateR |-> val(elt("working"))),
   ('stateS |-> val(elt("working"))),
   ('W |-> val(elt(true))),
   ('D |-> val(elt("D1"))) .


----------------------------
--- Event SND-snd-data
----------------------------

--- Activation of the Event SND-snd-data
ceq [SND-snd-data] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : ( ( $$SEv, ev('SND-snd-data, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : (($$SEv, ev('SND-snd-data, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : (($$SEv, ev('SND-snd-data, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((($$W) =b (val(elt(true)))) andb (($$stateS) =b (val(elt("working"))))) 
.

--- Change of state for event SND-snd-data
rl [SND-snd-data] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : ev('SND-snd-data, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
    < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'D |-> val(elt("D2")) , 'W |-> val(elt(false))) , events : ev('SND-snd-data, running) > 
    . 
----------------------------
--- Event RCV-current-data
----------------------------

--- Activation of the Event RCV-current-data
ceq [RCV-current-data] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : ( ( $$SEv, ev('RCV-current-data, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : (($$SEv, ev('RCV-current-data, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : (($$SEv, ev('RCV-current-data, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((((($$stateR) =b (val(elt("working")))) andb (($$W) =b (val(elt(false))))) andb (($$counterR) =b ($$counterS))) andb (( ( ($$counterR) + (val(elt(1))) )) < ($$N))) 
.

--- Change of state for event RCV-current-data
rl [RCV-current-data] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : ev('RCV-current-data, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
    < $$MNAME : Machine | variables : ('counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D , 'counterR |-> ($$counterR) + (val(elt(1))) , 'fileR |-> overr($$fileR, val( ( $$counterR |-> $$D ) ))) , events : ev('RCV-current-data, running) > 
    . 
----------------------------
--- Event RCV-success
----------------------------

--- Activation of the Event RCV-success
ceq [RCV-success] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : ( ( $$SEv, ev('RCV-success, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : (($$SEv, ev('RCV-success, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : (($$SEv, ev('RCV-success, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((((($$stateR) =b (val(elt("working")))) andb (($$W) =b (val(elt(false))))) andb (($$N) =b ( ( ($$counterR) + (val(elt(1))) )))) andb (($$counterR) =b ($$counterS))) 
.

--- Change of state for event RCV-success
rl [RCV-success] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : ev('RCV-success, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
    < $$MNAME : Machine | variables : ('counterS |-> $$counterS , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D , 'stateR |-> val(elt("success")) , 'fileR |-> overr($$fileR, val( ( $$counterR |-> $$D ) )) , 'counterR |-> ($$counterR) + (val(elt(1)))) , events : ev('RCV-success, running) > 
    . 
----------------------------
--- Event SND-rcv-current-ack
----------------------------

--- Activation of the Event SND-rcv-current-ack
ceq [SND-rcv-current-ack] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : ( ( $$SEv, ev('SND-rcv-current-ack, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : (($$SEv, ev('SND-rcv-current-ack, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : (($$SEv, ev('SND-rcv-current-ack, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((((($$stateS) =b (val(elt("working")))) andb (($$W) =b (val(elt(false))))) andb (( ( ($$counterS) + (val(elt(1))) )) < ($$N))) andb (($$counterR) =b ( ( ($$counterS) + (val(elt(1))) )))) 
.

--- Change of state for event SND-rcv-current-ack
rl [SND-rcv-current-ack] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : ev('SND-rcv-current-ack, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
    < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'D |-> $$D , 'W |-> val(elt(true)) , 'counterS |-> ($$counterS) + (val(elt(1)))) , events : ev('SND-rcv-current-ack, running) > 
    . 
----------------------------
--- Event SND-success
----------------------------

--- Activation of the Event SND-success
ceq [SND-success] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : ( ( $$SEv, ev('SND-success, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : (($$SEv, ev('SND-success, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : (($$SEv, ev('SND-success, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((((($$stateS) =b (val(elt("working")))) andb (($$W) =b (val(elt(false))))) andb (( ( ($$counterS) + (val(elt(1))) )) =b ($$N))) andb (($$counterR) =b ( ( ($$counterS) + (val(elt(1))) )))) 
.

--- Change of state for event SND-success
rl [SND-success] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : ev('SND-success, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
    < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'W |-> $$W , 'D |-> $$D , 'stateS |-> val(elt("success"))) , events : ev('SND-success, running) > 
    . 
----------------------------
--- Event SND-time-out
----------------------------

--- Activation of the Event SND-time-out
ceq [SND-time-out] :
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : ( ( $$SEv, ev('SND-time-out, unknown) ) ) > 
    =
    if $$WEIGHT > 0 and $$GUARD == true
    then 
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : (($$SEv, ev('SND-time-out, enable($$WEIGHT)))) > 
    else
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : (($$SEv, ev('SND-time-out, blocked))) > 
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool((($$stateS) =b (val(elt("working")))) andb (($$W) =b (val(elt(false))))) 
.

--- Change of state for event SND-time-out
rl [SND-time-out] : 
    < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : ev('SND-time-out, execute) > 
    =>
      < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) > 
    < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'D |-> $$D , 'W |-> val(elt(true))) , events : ev('SND-time-out, running) > 
    . 
  --- Initialization of events
  eq init-events = ev('SND-snd-data, unknown),ev('RCV-current-data, unknown),ev('RCV-success, unknown),ev('SND-rcv-current-ack, unknown),ev('SND-success, unknown),ev('SND-time-out, unknown) .


  --- ------------
  --- Properties  
  --- ------------
  var SYS : Configuration .


  --- This definition depends on the system
  --- Change 1.0 with, for instance,   float(ebset2nat($$n)) 
  --- eq val(1, Conf < $$MNAME : Machine | variables: ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : $$SEv > ) = 1.0 . 
  --- Properties can be also defined in the .b file with a section PROPERTIES


eq prop(1,   < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) >  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : $$SEv > ) 
  = toFloat(((($$stateS) =b (val(elt("success")))) andb (($$stateR) =b (val(elt("success")))))) .

eq prop(2,   < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) >  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : $$SEv > ) 
  = toFloat(((($$stateS) =b (val(elt("failure")))) andb (($$stateR) =b (val(elt("failure")))))) .

eq prop(3,   < $$CNAME : Context | sets : ($$Sets), constants : ('N |-> $$N) >  < $$MNAME : Machine | variables : ('fileR |-> $$fileR , 'counterR |-> $$counterR , 'counterS |-> $$counterS , 'stateR |-> $$stateR , 'stateS |-> $$stateS , 'W |-> $$W , 'D |-> $$D), events : $$SEv > ) 
  = toFloat(((($$stateS) =b (val(elt("success")))) impb (($$stateR) =b (val(elt("success")))))) .


  ---- Defining the initial state
  op initState : -> Configuration .
  eq initState = init-machine('ctxBRTP, 'BRTP) .
endm

eof

--- example of use

--- One step of rewriting
rew [1] initState . 

--- Search for all reachable states satisfying prop(1)
search initState =>* SYS such that SYS |= prop(1) .

--- Model Checking 
red modelCheck(initState, True) .

--- Umaudemc for stochastic model checking
umaudemc scheck file.maude initState formula.quatex

